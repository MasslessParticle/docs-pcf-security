---
title: PCF Component and Container Security
owner: Security
---

Pivotal Cloud Foundry (PCF) uses Transport Layer Security (TLS) protocols to secure connections between internal components, app containers, and customer hardware.

Within a PCF deployment, TLS secures connections between components like the BOSH Director and service tiles. PCF components also use TLS connections to secure communications with external hardware, such as customer load balancers.

In Pivotal Application Service (PAS), app instance containers have [identity credentials](#container-creds) that enable TLS communication by app instances.

## <a id="container-creds"></a> App Instance Container Identity Credentials

Each app instance container in PCF has a PEM-encoded [X.509](https://tools.ietf.org/html/rfc5280) certificate and [PKCS #1 RSA](https://tools.ietf.org/html/rfc3447) private key. App developers can use these credentials to enable secure TLS communications from their apps.

Instance container certificates are issued from a separate, app-specific root Certificate Authority (CA) and satisfy the following properties:

* The **Common Name** of the certificate is the app instance GUID.
* The **Subject** of the certificate contains an **Organizational Unit** in the form of <code>app:APP-GUID</code>.
* The certificate contains a **Subject Alternative Name** (SAN) with the IP address for the app instance container.

Each container stores its credentials in the following variables:

<table id='instance-certs' border="1" class="nice" >
  <tr>
    <th>Credential / Keypair Element</th>
    <th>Environment Variable</th>
    <th>Command to Retrieve Value</th>
  </tr><tr>
    <td>Certificate</td>
    <td><code>CF_INSTANCE_CERT</code></td>
    <td><code>cf ssh APP-NAME -c 'cat $CF_INSTANCE_CERT'</code></td>
  </tr><tr>
    <td>Private Key</td>
    <td><code>CF_INSTANCE_KEY</code></td>
    <td><code>cf ssh APP-NAME -c 'cat $CF_INSTANCE_KEY'</code></td>
  </tr>
</table>

The root CA certificate of the app is installed in the system trust store for buildpack-based apps, and is also present as a file in `/etc/cf-system-certificates`.

To run TLS connections or otherwise use instance container credentials from their apps, developers must first add the certificates to their development stack configuration.

For more information about instance ID creds, see the [Instance Identity](https://github.com/cloudfoundry/diego-release/blob/develop/docs/instance-identity.md) document in the diego-release repository.

## <a id="ciphers"></a> TLS Cipher Suites

By default, PCF uses a limited set of cipher suites to secure its internal communications. However, some components used in PCF, like the Gorouter and HAProxy, may support additional TLS cipher suites to accommodate older clients outside of PCF. 

<p class="note">The AWS Classic load balancer does not support the recommended TLS cipher suites. See <a href="../../adminguide/securing-traffic.html#ciphers">Securing Traffic into Cloud Foundry</a> for details and mitigations.</p>

For components that allow you to configure TLS cipher suites, only specify the TLS cipher suites that you need.

### <a id="cipher_recs"></a>TLS Cipher Suite Recommendations

The default and recommended version of TLS to use is TLS v1.2.

The recommended TLS cipher suites to use within PCF are the following:

<ul>
  <li>TLS_DHE_RSA_WITH_AES_128_GCM_SHA256</li>
	<li>TLS_DHE_RSA_WITH_AES_256_GCM_SHA384</li>
	<li>TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256</li>
	<li>TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384</li>
</ul>

###<a id="cipher_gorouter"></a> Gorouter Configuration

As part of your PAS networking configuration, you must specify the TLS cipher suites that the Gorouter uses to secure its communications. Only specify the cipher suites that you need.

The recommended TLS cipher suites for the Gorouter are:

<ul>
  <li>ECDHE-RSA-AES128-GCM-SHA256</li>
  <li>ECDHE-RSA-AES256-GCM-SHA384</li>
</ul>

You can specify other cipher suites and a different minimum version of TLS support if your deployment requires it. For a list of other cipher suites and other versions of TLS that are optionally supported by the Gorouter, see [Securing Traffic into Cloud Foundry](../../adminguide/securing-traffic.html#ciphers).

For instructions on how to configure the TLS cipher suites for the Gorouter, see the PAS installation documentation for the IaaS of your deployment. For example, if you are deploying PAS on GCP, see [Step 6: Configure Networking](../../customizing/gcp-er-config.html#networking). 

###<a id="cipher_haproxy"></a> HAProxy Configuration

As part of your PAS networking configuration, you must specify the TLS cipher suites that HAProxy uses to secure its communications. Only specify the cipher suites that you need.

The recommended TLS cipher suites for HAProxy are:

<ul>
  <li>DHE-RSA-AES128-GCM-SHA256</li>
  <li>DHE-RSA-AES256-GCM-SHA384</li>
  <li>ECDHE-RSA-AES128-GCM-SHA256</li>
  <li>ECDHE-RSA-AES256-GCM-SHA384</li>
</ul>

You can specify other cipher suites and a different minimum version of TLS support if your deployment requires it. For a list of other cipher suites and other versions of TLS that are optionally supported by HAProxy, see [ciphers - Cipher Suite Names](https://www.openssl.org/docs/man1.0.2/apps/ciphers.html#CIPHER-SUITE-NAMES) in the OpenSSL documentation.

If you use the default and recommended Gorouter TLS cipher suites in PAS, then ensure you have included these Gorouter TLS cipher suites in your HAProxy TLS cipher suite configuration.

If you change the default Gorouter TLS cipher suites in PAS, and you change the TLS cipher suites for HAProxy, ensure that you have at least one overlapping TLS cipher suite within the two sets.

For instructions on how to configure the TLS cipher suites for HAProxy, see the PAS installation documentation for the IaaS of your deployment. For example, if you are deploying PAS on GCP, see [Step 6: Configure Networking](../../customizing/gcp-er-config.html#networking).

## <a id="components"></a> Component Communications

The following topics describe how network communications work for main subsystem of PCF. Each topic lists the paths, ports, and protocols that the components within the subsystem use to communicate.

* <a href="/pivotalcf/security/networking/cc-network-paths.html">Cloud Controller Network Communications</a>

* <a href="/pivotalcf/security/networking/consul-network-paths.html">Consul Network Communications</a>

* <a href="/pivotalcf/security/networking/diego-network-paths.html">Diego Network Communications</a>

* <a href="/pivotalcf/security/networking/loggregator-network-paths.html">Loggregator Network Communications</a>

* <a href="/pivotalcf/security/networking/mysql-network-paths.html">MySQL Network Communications</a>

* <a href="/pivotalcf/security/networking/nats-network-paths.html">NATS Network Communications</a>

* <a href="/pivotalcf/security/networking/routing-network-paths.html">Routing Network Communications</a>

* <a href="/pivotalcf/security/networking/uaa-network-paths.html">UAA Network Communications</a>
